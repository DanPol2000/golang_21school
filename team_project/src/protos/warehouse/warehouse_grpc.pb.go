// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: protos/warehouse.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WarehouseClient is the client API for Warehouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseClient interface {
	GetItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Item, error)
	SetItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*OperationResultResponse, error)
	DeleteItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*OperationResultResponse, error)
	IsAliveRequest(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*IsAliveResponse, error)
}

type warehouseClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseClient(cc grpc.ClientConnInterface) WarehouseClient {
	return &warehouseClient{cc}
}

func (c *warehouseClient) GetItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/Warehouse/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) SetItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*OperationResultResponse, error) {
	out := new(OperationResultResponse)
	err := c.cc.Invoke(ctx, "/Warehouse/SetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) DeleteItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*OperationResultResponse, error) {
	out := new(OperationResultResponse)
	err := c.cc.Invoke(ctx, "/Warehouse/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) IsAliveRequest(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*IsAliveResponse, error) {
	out := new(IsAliveResponse)
	err := c.cc.Invoke(ctx, "/Warehouse/IsAliveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseServer is the server API for Warehouse service.
// All implementations must embed UnimplementedWarehouseServer
// for forward compatibility
type WarehouseServer interface {
	GetItem(context.Context, *ItemRequest) (*Item, error)
	SetItem(context.Context, *Item) (*OperationResultResponse, error)
	DeleteItem(context.Context, *ItemRequest) (*OperationResultResponse, error)
	IsAliveRequest(context.Context, *ItemRequest) (*IsAliveResponse, error)
}

// UnimplementedWarehouseServer must be embedded to have forward compatible implementations.
type UnimplementedWarehouseServer struct {
}

func (UnimplementedWarehouseServer) GetItem(context.Context, *ItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedWarehouseServer) SetItem(context.Context, *Item) (*OperationResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetItem not implemented")
}
func (UnimplementedWarehouseServer) DeleteItem(context.Context, *ItemRequest) (*OperationResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedWarehouseServer) IsAliveRequest(context.Context, *ItemRequest) (*IsAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAliveRequest not implemented")
}
func (UnimplementedWarehouseServer) mustEmbedUnimplementedWarehouseServer() {}

// UnsafeWarehouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseServer will
// result in compilation errors.
type UnsafeWarehouseServer interface {
	mustEmbedUnimplementedWarehouseServer()
}

func RegisterWarehouseServer(s grpc.ServiceRegistrar, srv WarehouseServer) {
	s.RegisterService(&Warehouse_ServiceDesc, srv)
}

func _Warehouse_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Warehouse/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).GetItem(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_SetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).SetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Warehouse/SetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).SetItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Warehouse/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).DeleteItem(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_IsAliveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).IsAliveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Warehouse/IsAliveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).IsAliveRequest(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Warehouse_ServiceDesc is the grpc.ServiceDesc for Warehouse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Warehouse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Warehouse",
	HandlerType: (*WarehouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItem",
			Handler:    _Warehouse_GetItem_Handler,
		},
		{
			MethodName: "SetItem",
			Handler:    _Warehouse_SetItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _Warehouse_DeleteItem_Handler,
		},
		{
			MethodName: "IsAliveRequest",
			Handler:    _Warehouse_IsAliveRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/warehouse.proto",
}
